[{"/Users/dominic/workspace/dad_page/dad-page-frontend/src/index.js":"1","/Users/dominic/workspace/dad_page/dad-page-frontend/src/App.js":"2","/Users/dominic/workspace/dad_page/dad-page-frontend/src/reportWebVitals.js":"3","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/LifeReview/LifeReview.js":"4","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Messages/Messages.js":"5","/Users/dominic/workspace/dad_page/dad-page-frontend/src/hoc/Aux.js":"6","/Users/dominic/workspace/dad_page/dad-page-frontend/src/hoc/Layouts/Layout.js":"7","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Articles/ArticleItems.js":"8","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Article/Article.js":"9","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/ArticleItem/Title.js":"10","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/ArticleItem/Markdown.js":"11","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Message/Message.js":"12","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/lifeReview.js":"13","/Users/dominic/workspace/dad_page/dad-page-frontend/src/utility/utility.js":"14","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/actionTypes.js":"15","/Users/dominic/workspace/dad_page/dad-page-frontend/src/network/axios.js":"16","/Users/dominic/workspace/dad_page/dad-page-frontend/src/hoc/ErrorHandler/withErrorHandler.js":"17","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/index.js":"18","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/lifeReview.js":"19","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/MessageBox/MessageBox.js":"20","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Input/Input.js":"21","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/messages.js":"22","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/messages.js":"23","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/createMessage.js":"24","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/CreateMessage/CreateMessage.js":"25","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/createMessage.js":"26","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Spinner/Spinner.js":"27","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Example/Centering4Ways.js":"28","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Image/ImageCard.js":"29","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Image/ImageInput.js":"30","/Users/dominic/workspace/dad_page/dad-page-frontend/src/base.js":"31","/Users/dominic/workspace/dad_page/dad-page-frontend/src/utility/Image/ImageResizer.js":"32","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Navigation/Header.js":"33","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/auth.js":"34","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/auth.js":"35","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/ContentContainer/ContentContainer.js":"36","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Cards/ErrorCard.js":"37","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Cards/MessageCard.js":"38","/Users/dominic/workspace/dad_page/dad-page-frontend/src/i18n.js":"39","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/CreateMessage/UpdateMessage.js":"40","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Message/MessageForm.js":"41","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/updateMessage.js":"42","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/updateMessage.js":"43","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Articles/CreateArticle.js":"44","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Article/ArticleForm.js":"45","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/createArticle.js":"46","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/createArticle.js":"47","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/updateArticle.js":"48","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/updateArticle.js":"49","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Articles/UpdateArticle.js":"50","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Dialogs/OkDialog.js":"51","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Dialogs/OkCancelDialog.js":"52","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/News/News.js":"53"},{"size":2195,"mtime":1612636606296,"results":"54","hashOfConfig":"55"},{"size":1439,"mtime":1612912607715,"results":"56","hashOfConfig":"55"},{"size":362,"mtime":1611619004206,"results":"57","hashOfConfig":"55"},{"size":3079,"mtime":1612918805863,"results":"58","hashOfConfig":"55"},{"size":6401,"mtime":1613442449428,"results":"59","hashOfConfig":"55"},{"size":59,"mtime":1611659217607,"results":"60","hashOfConfig":"61"},{"size":1206,"mtime":1612922163593,"results":"62","hashOfConfig":"55"},{"size":10250,"mtime":1613442460948,"results":"63","hashOfConfig":"55"},{"size":1325,"mtime":1612742105995,"results":"64","hashOfConfig":"55"},{"size":384,"mtime":1611702008555,"results":"65","hashOfConfig":"55"},{"size":1156,"mtime":1611700148756,"results":"66","hashOfConfig":"61"},{"size":3139,"mtime":1612317787361,"results":"67","hashOfConfig":"55"},{"size":2438,"mtime":1613440831542,"results":"68","hashOfConfig":"55"},{"size":1151,"mtime":1613262299364,"results":"69","hashOfConfig":"55"},{"size":2672,"mtime":1613439457799,"results":"70","hashOfConfig":"55"},{"size":150,"mtime":1611685955063,"results":"71","hashOfConfig":"55"},{"size":1907,"mtime":1611793954820,"results":"72","hashOfConfig":"55"},{"size":593,"mtime":1613441816822,"results":"73","hashOfConfig":"55"},{"size":4256,"mtime":1613441281786,"results":"74","hashOfConfig":"55"},{"size":1623,"mtime":1611794107852,"results":"75","hashOfConfig":"55"},{"size":2053,"mtime":1612490298799,"results":"76","hashOfConfig":"55"},{"size":5123,"mtime":1613438899929,"results":"77","hashOfConfig":"55"},{"size":3533,"mtime":1613436633043,"results":"78","hashOfConfig":"55"},{"size":1518,"mtime":1612198100757,"results":"79","hashOfConfig":"55"},{"size":13810,"mtime":1613433225762,"results":"80","hashOfConfig":"55"},{"size":3994,"mtime":1612315116458,"results":"81","hashOfConfig":"55"},{"size":307,"mtime":1611797592071,"results":"82","hashOfConfig":"55"},{"size":1585,"mtime":1611797294917,"results":"83","hashOfConfig":"55"},{"size":672,"mtime":1612056203911,"results":"84","hashOfConfig":"55"},{"size":417,"mtime":1612627614502,"results":"85","hashOfConfig":"55"},{"size":1066,"mtime":1613442626018,"results":"86","hashOfConfig":"55"},{"size":1488,"mtime":1612308070740,"results":"87","hashOfConfig":"55"},{"size":4122,"mtime":1612912772270,"results":"88","hashOfConfig":"55"},{"size":2977,"mtime":1612286800102,"results":"89","hashOfConfig":"55"},{"size":1813,"mtime":1612313632187,"results":"90","hashOfConfig":"55"},{"size":647,"mtime":1612055935758,"results":"91","hashOfConfig":"55"},{"size":1099,"mtime":1612207196981,"results":"92","hashOfConfig":"55"},{"size":931,"mtime":1612206684755,"results":"93","hashOfConfig":"55"},{"size":1024,"mtime":1612203255018,"results":"94","hashOfConfig":"55"},{"size":5042,"mtime":1612634558754,"results":"95","hashOfConfig":"55"},{"size":10751,"mtime":1612627661051,"results":"96","hashOfConfig":"55"},{"size":5438,"mtime":1612321227595,"results":"97","hashOfConfig":"55"},{"size":2016,"mtime":1612321455494,"results":"98","hashOfConfig":"55"},{"size":5038,"mtime":1612630537101,"results":"99","hashOfConfig":"55"},{"size":11817,"mtime":1612667441613,"results":"100","hashOfConfig":"55"},{"size":5115,"mtime":1612667801672,"results":"101","hashOfConfig":"55"},{"size":1518,"mtime":1612489793684,"results":"102","hashOfConfig":"55"},{"size":7312,"mtime":1612668564127,"results":"103","hashOfConfig":"55"},{"size":3112,"mtime":1612664742618,"results":"104","hashOfConfig":"55"},{"size":4778,"mtime":1612656270412,"results":"105","hashOfConfig":"55"},{"size":768,"mtime":1612665195453,"results":"106","hashOfConfig":"55"},{"size":915,"mtime":1612665325777,"results":"107","hashOfConfig":"55"},{"size":6117,"mtime":1613050255014,"results":"108","hashOfConfig":"55"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"zdiml4",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"111"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"1rysc9r",{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"111"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"149"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"111"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"111"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"111"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"111"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"111"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"111"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"111"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"111"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"111"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"111"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"111"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"111"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"111"},"/Users/dominic/workspace/dad_page/dad-page-frontend/src/index.js",[],["237","238"],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/App.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/reportWebVitals.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/LifeReview/LifeReview.js",["239","240","241","242"],"import React, { Component } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport titleImage from '../../assets/venice.jpg'\nimport profileImage from '../../assets/profile.jpeg'\nimport { withStyles } from '@material-ui/core/styles';\n\nimport ArticleItems from '../Articles/ArticleItems';\nimport ContentContainer from '../../components/UI/ContentContainer/ContentContainer';\nimport { withTranslation } from 'react-i18next';\n\nconst styles = theme => ({\n    root: {\n        paddingBottom: 100\n    },\n    titleImageDiv: {\n        overflow: 'hidden'\n    },\n    titleImage: {\n\n        objectFit: 'cover',\n        // height: '400px',\n        width: '1080px',\n        marginTop: '20px',\n        marginLeft: '50%',\n        transform: 'translateX(-50%)'\n    },\n    profileImage: {\n        objectFit: 'contain',\n        top: '180px',\n        // marginTop: '20px',\n        position: 'absolute',\n\n        height: '300px',\n        marginLeft: '65%',\n        transform: 'translateX(-65%)',\n\n\n        [theme.breakpoints.down('sm')]: {\n            height: '250px',\n            marginLeft: '50%',\n            transform: 'translateX(-50%)',\n        }\n    },\n    title: {\n        top: '450px',\n        // marginTop: '100px',\n        marginLeft: '5%',\n        transform: 'translateX(-5%)',\n        position: 'absolute',\n        width: '700px',\n        color: 'white',\n        fontWeight: 'bold',\n        textShadow: '1px 1px black',\n\n        [theme.breakpoints.down('sm')]: {\n            top: '400px',\n            marginLeft: '50%',\n            width: '250px',\n            transform: 'translateX(-50%)'\n        }\n    }\n});\n\nclass LifeReview extends Component {\n    \n    render() {\n        const {t} = this.props;\n\n        return (\n            <React.Fragment>\n                <ContentContainer>\n                    {/* <div className={this.props.classes.titleImageDiv}>\n                        <img\n                            className={this.props.classes.titleImage}\n                            // src={titleImage}\n                            src=\"https://firebasestorage.googleapis.com/v0/b/dad-page.appspot.com/o/lifereview%2Fcover.jpg?alt=media&token=98e2a593-7cec-4a5b-8a13-4192b9686df7\"\n                            alt='image'\n                        />\n                    </div>\n                    <img\n                        className={this.props.classes.profileImage}\n                        src={profileImage}\n                        alt='image'\n                    />\n                    <Typography variant=\"h6\" align=\"center\"\n                        className={this.props.classes.title}\n                    >\n                        {t('lifereview.heading')}\n                    </Typography> */}\n                    <Grid container justify=\"center\" className={this.props.classes.root}\n                    // spacing={2} \n                    >\n                        <ArticleItems />\n                    </Grid>\n                </ContentContainer>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withTranslation()(withStyles(styles)(LifeReview));","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Messages/Messages.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/hoc/Aux.js",[],["243","244"],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/hoc/Layouts/Layout.js",["245","246"],"import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Container, MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport {indigo} from '@material-ui/core/colors';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Header from '../../components/Navigation/Header';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: indigo\n    }\n    // typography: {\n    //     fontFamily: [\n    //       'sans-serif'\n    //     ].join(','),\n    // }\n});\n\nconst useStyles = makeStyles(theme => {\n    return ({\n    root: {\n        marginTop: 100,\n        minHeight: 'calc(100vh - 100px)',\n        width: '80%',        \n        [theme.breakpoints.down('sm')]:{\n            width: '100%'\n        },\n        background: '#F5F3EE'\n    }\n})});\n\n\nconst MuiLayout = (props) => {\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            {/* to ensure similar look and feel across different browsers */}\n            <CssBaseline />\n\n            <MuiThemeProvider theme={theme}>\n                <Header />\n                {props.children}\n            </MuiThemeProvider>\n        </React.Fragment>\n    );\n}\n\nexport default MuiLayout;","/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Articles/ArticleItems.js",["247"],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Article/Article.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/ArticleItem/Title.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/ArticleItem/Markdown.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Message/Message.js",["248"],"import React from 'react';\nimport Title from '../ArticleItem/Title';\nimport { Typography, Card, CardContent, Grid, CardActions, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withTranslation } from 'react-i18next';\n\nimport ImageCard from '../UI/Image/ImageCard';\n\nconst useStyles = makeStyles({\n    root: {\n        marginBottom: '50px',\n        width: '100%',\n        background: '#F5E9D4'\n    },\n    content: {\n        margin: '12px'\n    },\n    gridListRoot: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        // backgroundColor: theme.palette.background.paper,\n    },\n    // gridList: {\n    //     width: 500,\n    //     height: 450,\n    //   },\n});\n\nconst Message = (props) => {\n    let title = null;\n    const classes = useStyles();\n    const {t} = props;\n\n    if (props.title) {\n        title = (\n            <Title title={props.title} />\n        );\n    }\n\n    let imageCards = [];\n    if (props.imageFiles) {\n        imageCards = (\n            <Grid container justify=\"center\">\n                {props.imageFiles.map((files, index) => (\n                    <Grid item key={index} xs={12} sm={10} md={8}>\n                        <ImageCard\n                            imageURL={files.resizedImageURL}\n                        />\n                    </Grid>\n                ))}\n            </Grid>\n\n            // <div className={classes.gridListRoot}>\n            //     <GridList className={classes.gridList} cols={2}>\n            //         {props.imageFiles.map((files, index) => (\n            //             <GridListTile key={index}>\n            //                 <img src={files.resizedImageURL} />\n            //             </GridListTile>\n            //         ))}\n            //     </GridList>\n            // </div>\n        );\n    }\n\n    let edit = null;\n    if(props.showEdit){\n        edit = (\n            <CardActions>\n                <Button color=\"primary\" variant=\"contained\"\n                    onClick={props.onEditClicked}\n                >\n                    {t('messages.edit_message')}\n                </Button>\n            </CardActions>\n        );\n    }\n\n    return (\n        <Card className={classes.root} variant=\"outlined\">\n            <CardContent>\n                <Typography className={classes.content}\n                    variant=\"body1\"\n                    style={{ whiteSpace: 'pre-line' }}\n                    gutterBottom paragraph>\n                    {props.content}\n                </Typography>\n                {imageCards}\n                <Typography\n                    className={classes.content}\n                    component=\"h2\"\n                    variant=\"h5\"\n                    color=\"inherit\"\n                    align=\"right\"\n                    style={{ whiteSpace: 'pre-line' }}\n                    // noWrap\n                    gutterBottom paragraph\n                >\n                    {props.author}\n                </Typography>\n            </CardContent>\n            {edit}\n        </Card>\n    );\n}\n\nexport default withTranslation()(Message);","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/lifeReview.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/utility/utility.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/actionTypes.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/network/axios.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/hoc/ErrorHandler/withErrorHandler.js",["249"],"import React, {Component} from 'react';\nimport Modal from '@material-ui/core/Modal';\n\nimport MessageBox from '../../components/UI/MessageBox/MessageBox';\n\nconst withErrorHandler = (WrappedComponent, axios) => {\n    //anonymous class\n    return class extends Component{\n        constructor (props) {\n            super(props);\n\n            this.state = {\n                error: null\n            };\n\n            // clear error whenever request is sent\n            this.reqInterceptor = axios.interceptors.request.use(req => {\n                this.setState({error: null});\n                return req;\n            });\n\n            this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n                this.setState({error: error});\n                return Promise.reject(error);\n            });\n        }\n\n        componentWillUnmount() {\n            // to ensure that axios interceptors are removed when component is unmount to prevent memory leak\n            console.log(this.reqInterceptor, this.resInterceptor);\n            axios.interceptors.request.eject(this.reqInterceptor);\n            axios.interceptors.response.eject(this.resInterceptor);\n        }\n\n        clearErrorHandler = () => {\n            this.setState({error: null});\n        }\n\n        render() {\n            return (\n                <React.Fragment>\n                    <MessageBox\n                        title=\"Error\"\n                        message={this.state.error\n                            ?this.state.error.message\n                            : 'Unexpected error'}\n                        actionType=\"OK\"\n                        open={this.state.error}\n                        onClose={this.clearErrorHandler}\n                    />\n                    <WrappedComponent {...this.props} />\n                </React.Fragment>\n                \n            );\n        }\n    }\n}\n\nexport default withErrorHandler;",["250","251"],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/index.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/lifeReview.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/MessageBox/MessageBox.js",["252"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nexport default function MessageBox(props) {\n\n    let title = null;\n    let message = null;\n    let buttons = null;\n    let dialogue = null;\n\n    if (props.title) {\n        title = <DialogTitle id=\"form-dialog-title\">{props.title}</DialogTitle>;\n    }\n\n    if (props.message) {\n        message = (\n            <DialogContentText>\n                {props.message}\n            </DialogContentText>\n        );\n    }\n\n    if (props.actionType === 'OK') {\n        buttons = (\n            <Button onClick={props.onClose} color=\"primary\">\n                OK\n            </Button>\n        );\n    }\n\n    if(props.open){\n        dialogue = (\n            <Dialog open onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\n                {title}\n\n                <DialogContent style={{minWidth: 400}}>\n                    {message}\n                    {props.children}\n                </DialogContent>\n                {buttons\n                    ? (<DialogActions>\n                        {buttons}\n                    </DialogActions>)\n                    : null}\n            </Dialog>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            {dialogue}\n        </React.Fragment>\n    );\n}\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Input/Input.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/messages.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/messages.js",["253"],"import * as actionTypes from '../actions/actionTypes';\nimport {updateObject, appendArray, updateArray} from '../../utility/utility';\n\nconst initialState = {\n    messages: null,\n    lastMessageSnapshot: null,\n    hasMoreMessages: false,\n    loading: false,\n    error: null,\n    moreError: null\n};\n\nconst getMessagesSuccess = (state, action) => {\n    \n    return updateObject(state, \n    {\n        loading: false,\n        error: null,\n        messages: action.messages,\n        lastMessageSnapshot: action.lastMessageSnapshot,\n        hasMoreMessages: action.hasMoreMessages\n    });\n}\n\nconst getMessagesFailed = (state, action) => {\n    return updateObject(state, {\n        loading: false,\n        error: action.error,\n        messages: null,\n        lastMessageSnapshot: null,\n        hasMoreMessages: false\n    });\n}\n\nconst getMessagesStart = (state) => {\n    return updateObject(state, {\n        loading: true,\n        error: null,\n        messages: null,\n        lastMessageSnapshot: null,\n        hasMoreMessages: false\n    });\n}\n\nconst getMoreMessagesStart = (state) => {\n    return updateObject(state,{\n        moreError: null\n    });\n}\n\nconst getMoreMessagesSuccess = (state, action) => {\n    const newMessages = appendArray(state.messages, action.messages);\n    \n    return updateObject(state, \n    {\n        moreError: null,\n        messages: newMessages,\n        lastMessageSnapshot: action.lastMessageSnapshot,\n        hasMoreMessages: action.hasMoreMessages\n    });\n}\n\nconst getMoreMessagesFailed = (state, action) => {\n    return updateObject(state, {\n        moreError: action.error\n    });\n}\n\nconst getSingleMessageStart = (state, action) => {\n    return updateObject(state, {\n        loading: true\n    })\n}\n\nconst getSingleMessageSuccess = (state, action) => {\n    const message = action.message;\n    const oldMessages = state.messages;\n\n    if(oldMessages && message){\n        let messageIndex = oldMessages.findIndex(msg => msg.id == message.id);\n\n        if(messageIndex >= 0) {\n            const newMessages = updateArray(oldMessages, message, messageIndex);\n            return updateObject(state,\n            {\n                loading: false,\n                messages: newMessages\n            });\n        }\n    }\n\n    return updateObject(state,\n    {\n        loading: false\n    });\n}\n\nconst getSingleMessageFailed = (state, action) => {\n    return updateObject(state,\n    {\n        loading: false\n    });\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_MESSAGES_SUCCESS:\n            return getMessagesSuccess(state, action);\n        case actionTypes.GET_MESSAGES_FAILED:\n            return getMessagesFailed(state, action);\n        case actionTypes.GET_MESSAGES_START:\n            return getMessagesStart(state, action);\n        case actionTypes.GET_MORE_MESSAGES_START:\n            return getMoreMessagesStart(state, action);\n        case actionTypes.GET_MORE_MESSAGES_SUCCESS:\n            return getMoreMessagesSuccess(state, action);\n        case actionTypes.GET_MORE_MESSAGES_FAILED:\n            return getMoreMessagesFailed(state, action);\n        case actionTypes.GET_SINGLE_MESSAGE_START:\n            return getSingleMessageStart(state, action);\n        case actionTypes.GET_SINGLE_MESSAGE_SUCCESS:\n            return getSingleMessageSuccess(state, action);\n        case actionTypes.GET_SINGLE_MESSAGE_FAILED:\n            return getSingleMessageFailed(state, action);\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/createMessage.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/CreateMessage/CreateMessage.js",["254","255"],"import React, { Component } from 'react';\nimport { Button, Grid, Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { app } from '../../base';\nimport { withTranslation } from 'react-i18next';\n\nimport Input from '../../components/UI/Input/Input'\nimport { checkFormFieldValid, updateArray } from '../../utility/utility';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ImageInput from '../../components/UI/Image/ImageInput';\nimport ImageCard from '../../components/UI/Image/ImageCard';\nimport { resizeImage } from '../../utility/Image/ImageResizer';\nimport ContentContainer from '../../components/UI/ContentContainer/ContentContainer';\nimport MessageCard from '../../components/UI/Cards/MessageCard';\nimport GoogleButton from 'react-google-button'\n\nconst styles = theme => ({\n    root: {\n        paddingBottom: 100\n    },\n    login: {\n        paddingTop: 50\n    },\n    form: {\n        '& .MuiTextField-root': {\n            // boxSizing: 'border-box',\n            margin: '20px 0px',\n            width: '100%',\n            display: 'block'\n        },\n        width: '100%'\n    }\n});\n\nclass CreateMessage extends Component {\n    state = {\n        controls: [\n            {\n                id: 'author',\n                elementType: 'textarea',\n                elementConfig: {\n                    label: this.props.t('createmessage.name'),\n                    rows: 2\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                modified: false\n            },\n            {\n                id: 'content',\n                elementType: 'textarea',\n                elementConfig: {\n                    label: this.props.t('createmessage.message'),\n                    rows: 15\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                modified: false\n            }\n        ],\n        isFormValid: false,\n        imageError: null,\n        imageFiles: [] // {original: file, resized: base64}\n    }\n\n    checkFormValid(form) {\n        return form.map((field) => {\n            if (!field.validation)\n                return true;\n            else\n                return field.valid;\n        }).reduce((accum, field) => {\n            return accum && field;\n        }, true);\n    }\n\n    submitHandler = (event) => {\n        // event.preventDefault();\n\n        const message = {};\n\n        if (this.checkFormValid(this.state.controls)) {\n            this.state.controls.forEach(control => {\n                message[control.id] = control.value;\n            });\n\n            this.props.onCreateMessage(\n                this.props.userId,\n                message,\n                this.state.imageFiles);\n        }\n    }\n\n    inputChangedHandler = (event, configIndex) => {\n        const updatedControls = updateArray(this.state.controls,\n            {\n                ...this.state.controls[configIndex],\n                value: event.target.value,\n                valid: checkFormFieldValid(event.target.value, this.state.controls[configIndex].validation),\n                modified: true\n            },\n            configIndex\n        );\n        //console.log(updatedControls);\n        this.setState({\n            controls: updatedControls,\n            isFormValid: this.checkFormValid(updatedControls)\n        });\n    }\n\n    resetForm = () => {\n        const newControls = this.state.controls.map(control => {\n            return {\n                ...control, ...{\n                    value: '',\n                    valid: false,\n                    modified: false\n                }\n            };\n        });\n\n        this.setState({\n            controls: newControls,\n            isFormValid: false,\n            imageFiles: [],\n            imageError: null\n        });\n\n        this.props.onCreateMessageReset();\n        this.props.onGetMoreMessages();\n        this.props.history.push(\"/messages\");\n    }\n\n    validateImage = (file) => {\n        if(file.type !== 'image/jpeg' \n            && file.type !== 'image/x-png'\n            && file.type !== 'image/png'){\n            return this.props.t('createmessage.errors.image_format');\n        }\n\n        if(file.size > 10485760){\n            return this.props.t('createmessage.errors.image_size');\n        }\n\n        return null;\n    }\n\n    imageChosenHandler = async (event) => {\n        const imageFilesList = event.target.files;\n        const inputValue = event.target.value;\n\n        if (imageFilesList) {\n            const imageFiles = [];\n\n            for (let i = 0; i < imageFilesList.length; i++) {\n                let file = imageFilesList[i];\n                let imageError = null;\n\n                imageError = this.validateImage(file);\n                if(imageError !== null){\n                    this.setState({\n                        imageFiles: [],\n                        imageError: imageError\n                    });\n\n                    return;\n                }\n                imageFiles.push({ original: file });\n            }\n\n            for (let index = 0; index < imageFiles.length; index++) {\n                let file = imageFiles[index];\n                let contentType = null;\n\n                contentType = 'JPEG';\n\n                try{\n                    imageFiles[index]['resized'] = await resizeImage(file.original, contentType);\n                }catch(error){\n                    console.log(error);\n                    this.setState({\n                        imageFiles: [],\n                        imageError: this.props.t('createmessage.errors.image_resize')\n                    });\n\n                    return;\n                }\n            };\n\n            this.setState({\n                imageFiles: imageFiles,\n                imageError: null\n            });\n\n        } else {\n            this.setState({\n                imageFiles: [],\n                imageError: null\n            });\n        }\n    }\n\n    render() {\n        const additionalConfig = { fullWidth: true };\n        const buttonConfig = {};\n        let mainContent = null;\n        const { t, classes } = this.props;\n\n        if (this.props.createMessageSuccess) {\n            mainContent = <Grid item xs={12} >\n                <MessageCard\n                    message={t('createmessage.submit_success')}\n                    actionText={t('general.ok')}\n                    onAction={this.resetForm} />\n            </Grid>;\n        }\n        else {\n            if (this.props.authenticated) {\n\n\n                // let resizedImageCard = null;\n                // if (this.state.resizedImageBase64) {\n                //     resizedImageCard = (\n                //         <React.Fragment>\n                //             <ImageCard\n                //                 imageURL={this.state.resizedImageBase64}\n                //             />\n                //         </React.Fragment>\n                //     );\n                // }\n\n                if (this.props.loading) {\n                    mainContent = <Grid item xs={12}><Spinner /></Grid>;\n                } else {\n                    let createMessageError = null;\n\n                    if (!this.state.isFormValid) {\n                        buttonConfig['disabled'] = true;\n                    }\n\n                    let imageError = null\n                    if(this.state.imageError){\n                        imageError = (<Typography\n                            variant=\"body1\"\n                            color=\"error\"\n                        >{this.state.imageError}</Typography>)\n                    }\n\n                    let imageCards = null;\n                    if (this.state.imageFiles.length > 0) {\n                        let images = this.state.imageFiles.map((files, index) => {\n                            let imageFilePath = URL.createObjectURL(files.original);\n                            if (files.resized) {\n                                imageFilePath = files.resized;\n                            }\n\n                            return (\n                                <Grid item xs={12} sm={10} md={8} key={index}>\n                                    <ImageCard\n                                        imageURL={imageFilePath}\n                                    />\n                                </Grid>\n                            );\n                        });\n\n                        imageCards = (\n                            <Grid container justify=\"center\" style={{ margin: '20px 0px' }}>\n                                {images}\n                            </Grid>\n                        );\n                    }\n\n                    if (this.props.createMessageError) {\n                        createMessageError = (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant=\"body1\"\n                                    color=\"error\"\n                                >{this.props.createMessageError.message}</Typography>\n                            </Grid>\n                        );\n                    }\n\n                    mainContent = (\n                        <React.Fragment>\n                            <Grid item xs={12}>\n                                <form className={classes.form} >\n                                    {this.state.controls.map((formElement, index) => {\n                                        return (\n                                            <Input\n                                                key={index}\n                                                elementType={formElement.elementType}\n                                                validation={formElement.validation}\n                                                elementConfig={{ ...formElement.elementConfig, ...additionalConfig }}\n                                                value={formElement.value}\n                                                onChange={(event) => { this.inputChangedHandler(event, index) }}\n                                                needValidation={formElement.validation && formElement.modified}\n                                                required={formElement.validation && formElement.validation.required}\n                                                invalid={!formElement.valid}\n                                            />\n                                        )\n                                    }\n                                    )}\n\n                                    {/* {resizedImageCard} */}\n                                </form>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Typography variant=\"body1\">\n                                    {t('createmessage.upload_image')}\n                                </Typography>\n                                <ImageInput\n                                    multiple\n                                    onChange={(e) => this.imageChosenHandler(e)} />\n                                {imageError}\n                                {imageCards}\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    {...buttonConfig}\n                                    onClick={this.submitHandler}\n                                >\n                                    {t('createmessage.submit')}\n                                </Button>\n                            </Grid>\n                            {createMessageError}\n                        </React.Fragment>\n                    );\n                };\n            } else {\n                mainContent = (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body1\" className={classes.login}>\n                                {t('createmessage.must_signin')}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <GoogleButton label={t('login.google_login')} onClick={this.props.onGoogleLogin} />\n                        </Grid>\n                    </React.Fragment>\n                );\n\n            }\n        }\n\n        return (\n            <ContentContainer>\n                <Grid container justify=\"center\" spacing={2} className={classes.root}>\n                    {mainContent}\n                </Grid>\n            </ContentContainer>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.createMessage.loading,\n        createMessageError: state.createMessage.createMessageError,\n        createMessageSuccess: state.createMessage.createMessageSuccess,\n\n        loginLoading: state.auth.loading,\n        authenticated: state.auth.authenticated,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCreateMessage: (userId, message, imageFiles) => dispatch(actions.createMessage(userId, message, imageFiles)),\n        onCreateMessageReset: () => dispatch(actions.createMessageReset()),\n        onGoogleLogin: () => dispatch(actions.googleLogin()),\n        onGetMessages: () => dispatch(actions.getMessages()),\n        onGetMoreMessages: () => dispatch(actions.getMoreMessages())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)\n    (withTranslation()(\n        withStyles(styles)(CreateMessage)\n    ));\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/createMessage.js",["256"],"import * as actionTypes from './actionTypes';\nimport axios from '../../network/axios';\nimport firebase from 'firebase';\nimport { app } from \"../../base\";\n\nexport const createMessageSuccess = () => {\n    return {\n        type: actionTypes.CREATE_MESSAGE_SUCCESS\n    };\n};\n\nexport const createMessageFailed = (error) => {\n    return {\n        type: actionTypes.CREATE_MESSAGE_FAILED,\n        error: error\n    };\n};\n\nexport const createMessageStart = () => {\n    return {\n        type: actionTypes.CREATE_MESSAGE_START\n    };\n}\n\nexport const createMessageReset = () => {\n    return {\n        type: actionTypes.CREATE_MESSAGE_RESET\n    };\n}\n\nconst uploadImage = async (filename, file, contentType, isBase64) => {\n    const storageRef = app.storage().ref();\n\n    let fileRef = storageRef.child(filename);\n    let downloadURL = null;\n\n\n    if (isBase64) {\n        await fileRef.putString(file, 'base64', { contentType: contentType })\n    } else {\n        await fileRef.put(file);\n    }\n    downloadURL = await fileRef.getDownloadURL();\n\n    return downloadURL;\n}\n\nexport const createMessage = (userId, message, imageFiles) => {\n    return async dispatch => {\n        dispatch(createMessageStart());\n\n        const fileNamePrefix = userId + '-' + new Date().getTime();\n        const messageImages = [];\n        const messageCopy = {...message}\n\n        for (let i = 0; i < imageFiles.length; i++) {\n            let originalImage = imageFiles[i].original;\n            let resizedImageBase64 = imageFiles[i].resized;\n\n            if (originalImage) {\n                let originalImageURL = null;\n                let image = {};\n\n                try {\n                    originalImageURL = await uploadImage(\n                        'messages/original/' + fileNamePrefix + '-' + i + '-ori',\n                        originalImage,\n                        originalImage.type,\n                        false);\n\n                    image['originalImageURL'] = originalImageURL;\n                } catch (error) {\n                    console.log(\"createMessage: uploadImage original[\"+i+\"] error \", error);\n                    dispatch(createMessageFailed(new Error('Upload original image '+i+' failed')));\n                    return;\n                }\n\n                if (resizedImageBase64) {\n                    let resizedImageURL = null;\n                    resizedImageBase64 = resizedImageBase64.substring(resizedImageBase64.indexOf(',') + 1);\n\n                    try {\n                        resizedImageURL = await uploadImage(\n                            'messages/resized/' + fileNamePrefix + '-' + i + '-r1',\n                            resizedImageBase64,\n                            // originalImage.type,\n                            'image/jpeg',\n                            true);\n\n                        image['resizedImageURL'] = resizedImageURL;\n                    } catch (error) {\n                        console.log(\"createMessage: uploadImage original[\"+i+\"] error \", error);\n                        dispatch(createMessageFailed(new Error('Upload resized image '+i+' failed')));\n                        return;\n                    }\n                }\n                messageImages.push(image);\n            }\n        }\n\n        messageCopy['imageFiles'] = messageImages;\n\n        // add order and timestamp as server timestamp\n        messageCopy['timestamp'] = firebase.firestore.FieldValue.serverTimestamp();\n        messageCopy['order'] = firebase.firestore.FieldValue.serverTimestamp();\n        messageCopy['userId'] = userId;\n\n        app.firestore().collection(\"messages\").add(messageCopy)\n            .then(response => {\n                console.log(\"createMessage: success\", response);\n                dispatch(createMessageSuccess());\n            })\n            .catch(function (error) {\n                console.log(\"createMessage: upload firestore failed\", error);\n                dispatch(createMessageFailed(new Error('Failed to create message')));\n            });\n    }\n}","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Spinner/Spinner.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Example/Centering4Ways.js",[],["257","258"],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Image/ImageCard.js",["259","260","261","262","263","264","265"],"import React from 'react';\nimport { Typography, Card, CardMedia, CardContent, Container, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst ImageCard = (props) => {\n\n    const style = {\n      height: 'auto',\n      width: '100%',\n      objectFit: 'contain'\n    }\n\n    let caption = null;\n\n    if(props.caption){\n      caption = <Typography variant=\"body1\">{props.caption}</Typography>\n    }\n\n    return (\n             <div>\n             <img \n                style={style}\n                src={props.imageURL}\n                alt='image'\n            />\n            {caption}\n            </div>\n    );\n}\n\nexport default ImageCard;","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Image/ImageInput.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/base.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/utility/Image/ImageResizer.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Navigation/Header.js",["266","267"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Toolbar, Button, Typography, Tabs, Tab } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\n\nimport * as actions from '../../store/actions/index';\n\n\nconst useStyles = makeStyles((theme) => ({\n    toolbar: {\n        borderBottom: `1px solid ${theme.palette.divider}`,\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: 50,\n        backgroundColor: '#D3E2E6',\n        zIndex: zIndex.appBar\n    },\n    toolbarTitle: {\n        flex: 1,\n    },\n    toolbarSecondary: {\n        justifyContent: 'space-between',\n        overflowX: 'auto',\n        position: 'fixed',\n        top: 50,\n        left: 0,\n        width: '100%',\n        height: 50,\n        backgroundColor: '#D4B58A',\n        zIndex: zIndex.appBar\n    },\n    toolbarLink: {\n        padding: theme.spacing(1),\n        flexShrink: 0,\n    },\n}));\n\nconst Header = (props) => {\n    const classes = useStyles();\n    const { t, location } = props;\n\n    let logoutButton = null;\n    if (props.authenticated) {\n        logoutButton = (<Button\n            onClick={props.onLogout}\n            // variant=\"outlined\" \n            size=\"small\"\n        >\n            {t('general.logout')}\n        </Button>);\n    }\n\n    console.log(props.location);\n\n    let tabsValue = '/';\n    let paths = props.location.pathname.match(new RegExp('^/\\\\w*'));\n    if(paths){\n        switch(paths[0]) {\n            case '/lifereview':\n                tabsValue = paths[0];\n                break;\n            case '/messages':\n                tabsValue = paths[0];\n                break;\n            case '/newmessage':\n                tabsValue=paths[0];\n                break;\n            default:\n                tabsValue='/';\n                break;\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <Toolbar className={classes.toolbar}>\n                <Typography\n                    component=\"h2\"\n                    variant=\"h5\"\n                    color=\"inherit\"\n                    align=\"center\"\n                    noWrap\n                    className={classes.toolbarTitle}\n                >\n                    {t('header.title')}\n                </Typography>\n                {logoutButton}\n            </Toolbar>\n            <Toolbar variant=\"dense\"\n                className={classes.toolbarSecondary}\n            >\n                {/* <Link to=\"/\">Life</Link>\n        <Link to=\"/messages\">Messages</Link>\n        <Link to=\"/newmessage\">New Message</Link> */}\n                <Tabs value={tabsValue}>\n                    <Tab\n                        label={t('toolbar.news')}\n                        component={Link}\n                        to=\"/\"\n                        value=\"/\"\n                    />\n                    <Tab\n                        label={t('toolbar.life')}\n                        component={Link}\n                        to=\"/lifereview\"\n                        value=\"/lifereview\"\n                    />\n                    <Tab\n                        label={t('toolbar.messages')}\n                        component={Link}\n                        to=\"/messages\"\n                        value=\"/messages\"\n                    />\n                    <Tab\n                        label={t('toolbar.new_message')}\n                        component={Link}\n                        to=\"/newmessage\"\n                        value=\"/newmessage\"\n                    />\n                </Tabs>\n            </Toolbar>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        authenticated: state.auth.authenticated\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withTranslation()(withRouter(Header)));","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/auth.js",["268"],"import firebase from 'firebase';\nimport * as actionTypes from './actionTypes';\nimport { app } from \"../../base\";\n\nexport const loginSuccess = (authProvider, userId) => {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        authProvider: authProvider,\n        userId: userId\n    };\n};\n\nexport const loginFailed = (error) => {\n    return {\n        type: actionTypes.LOGIN_FAILED,\n        error: error\n    };\n};\n\nexport const loginStart = () => {\n    return {\n        type: actionTypes.LOGIN_START\n    };\n}\n\nconst getGoogleProvider = () => {\n\n    const provider = new firebase.auth.GoogleAuthProvider();\n    provider.addScope('https://www.googleapis.com/auth/userinfo.email');\n    // provider.setCustomParameters({\n    //     'login_hint': 'user@example.com'\n    // });\n\n    return provider;\n}\n\nexport const googleLogin = () => {\n    return dispatch => {\n        dispatch(loginStart());\n\n        firebase.auth()\n            .signInWithPopup(getGoogleProvider())\n            .then((result) => {\n                /** @type {firebase.auth.OAuthCredential} */\n                const credential = result.credential;\n\n                dispatch(loginSuccess('google.com', result.user.uid));\n            }).catch((error) => {\n                dispatch(loginFailed(error));\n            });\n    }\n}\n\nexport const logoutSuccess = () => {\n    return {\n        type: actionTypes.LOGOUT_SUCCESS\n    };\n};\n\nexport const logoutFailed = (error) => {\n    return {\n        type: actionTypes.LOGOUT_FAILED,\n        error: error\n    };\n};\n\nexport const logoutStart = () => {\n    return {\n        type: actionTypes.LOGOUT_START\n    };\n}\n\nexport const logout = () => {\n    return dispatch => {\n        dispatch(logoutStart());\n\n        firebase.auth().signOut()\n            .then((result) => {\n                dispatch(logoutSuccess());\n            }).catch((error) => {\n                dispatch(logoutFailed(error));\n            });\n    }\n}\n\nexport const initAuth = () => {\n    return dispatch => {\n        // set firebase user token persistent to local storage\n        app.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n            .then(() => {\n                console.log('set firebase persistence success');\n            })\n            .catch((error) => {\n                console.log('set firebase persistence failed', error);\n            })\n            .finally(() => {\n                app.auth().onAuthStateChanged(function(user) {\n                    console.log('onAuthStateChanged', user);\n                    dispatch(refreshLoginState());\n                  });\n            });\n    }\n}\n\nexport const refreshLoginState = () => {\n    return dispatch => {\n        const user = app.auth().currentUser;\n\n        if (user === null) {\n            dispatch(logout());\n            console.log('refreshLoginState user = null');\n        } else {\n            console.log('refreshLoginState user = '+user.uid);\n            dispatch(loginSuccess('google.com', user.uid));\n        }\n    }\n}","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/auth.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/ContentContainer/ContentContainer.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Cards/ErrorCard.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Cards/MessageCard.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/i18n.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/CreateMessage/UpdateMessage.js",["269","270","271","272","273","274","275"],"import React, { Component } from 'react';\nimport { Button, Grid, Typography, Dialog, DialogContent, DialogTitle, Container } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { withTranslation } from 'react-i18next';\n\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ContentContainer from '../../components/UI/ContentContainer/ContentContainer';\nimport MessageCard from '../../components/UI/Cards/MessageCard';\nimport GoogleButton from 'react-google-button'\nimport MessageForm from '../../components/Message/MessageForm';\n\nconst styles = theme => ({\n});\n\nclass UpdateMessage extends Component {\n\n    getMessageId = () => {\n        // const { pathname } = this.props.location;\n        // return decodeURI(pathname.substring(pathname.lastIndexOf('/') + 1));\n        return this.props.messageId;\n    }\n\n    submitHandler = (message, imageModified, imageFiles) => {\n        this.props.onUpdateMessage(            \n            this.props.userId, \n            this.getMessageId(),\n            message, \n            imageModified, \n            imageFiles\n        );\n\n    }\n    \n    render() {\n        const additionalConfig = { fullWidth: true };\n        const buttonConfig = {};\n        let mainContent = null;\n        const { t, classes } = this.props;\n\n        if (this.props.updateMessageSuccess) {\n            mainContent = (\n                <Grid item xs={12}>\n                    <MessageCard\n                        message={t('updatemessage.success')}\n                        actionText={t('general.ok')}\n                        onAction={this.props.onSuccess} />\n                </Grid>\n            );\n        }\n        else {\n            if (this.props.authenticated) {\n\n                if (!this.props.message || this.props.loading) {\n                    mainContent = <Grid item xs={12}><Spinner /></Grid>;\n                } else {\n                    let updateMessageError = null;\n\n                    if (this.props.updateMessageError) {\n                        updateMessageError = (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant=\"body1\"\n                                    color=\"error\"\n                                >{this.props.updateMessageError.message}</Typography>\n                            </Grid>\n                        );\n                    }\n\n                    mainContent = (\n                        <React.Fragment>\n                            <Grid item xs={12}>\n                                <MessageForm\n                                    message={this.props.message}\n                                    onSubmit={this.submitHandler}\n                                    onCancel={this.props.onCancel}\n                                />\n                            </Grid>\n                            {updateMessageError}\n                        </React.Fragment>\n                    );\n                };\n            } else {\n                mainContent = (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body1\" >\n                                {t('general.must_signin')}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <GoogleButton label={t('login.google_login')} onClick={this.props.onGoogleLogin} />\n                        </Grid>\n                    </React.Fragment>\n                );\n\n            }\n        }\n\n        return (\n            <Dialog open={this.props.show} >   \n                <DialogContent>\n                    <Grid container justify=\"center\" spacing={2}>\n                        <Grid item xs={12}>\n                        <Typography variant=\"h4\">\n                            {t('updatemessage.title')}\n                        </Typography>\n                    </Grid>\n                        {mainContent}\n                    </Grid>\n                </DialogContent>\n\n            </Dialog>\n            \n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.updateMessage.loading,\n        updateMessageError: state.updateMessage.error,\n        updateMessageSuccess: state.updateMessage.updateMessageSuccess,\n\n        loginLoading: state.auth.loading,\n        authenticated: state.auth.authenticated,\n        userId: state.auth.userId,\n\n        message: state.updateMessage.message\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateMessage: (userId, messageId, message, imageModified, imageFiles) => dispatch(actions.updateMessage(userId, messageId, message, imageModified, imageFiles)),\n        onGoogleLogin: () => dispatch(actions.googleLogin())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)\n    (withTranslation()(\n        withStyles(styles)(UpdateMessage)\n    ));\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Message/MessageForm.js",["276","277","278","279"],"import React, { Component } from 'react';\nimport { Button, Grid, Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withTranslation } from 'react-i18next';\n\nimport Input from '../UI/Input/Input'\nimport { checkFormFieldValid, updateArray } from '../../utility/utility';\nimport ImageInput from '../UI/Image/ImageInput';\nimport ImageCard from '../UI/Image/ImageCard';\nimport { resizeImage } from '../../utility/Image/ImageResizer';\n\nconst styles = theme => ({\n    form: {\n        '& .MuiTextField-root': {\n            // boxSizing: 'border-box',\n            margin: '20px 0px',\n            width: '100%',\n            display: 'block'\n        },\n        width: '100%'\n    },\n    button: {\n        margin: 10\n    }\n});\n\nclass MessageForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        const {t, message} = props;\n\n        this.state= {\n            controls: [\n                {\n                    id: 'author',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        label: props.t('createmessage.name'),\n                        rows: 2\n                    },\n                    value: props.message\n                        ? props.message.author\n                        :'',\n                    validation: {\n                        required: true\n                    },\n                    valid: props.message? true : false,\n                    modified: false\n                },\n                {\n                    id: 'content',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        label: props.t('createmessage.message'),\n                        rows: 15\n                    },\n                    value: props.message\n                        ? props.message.content\n                        :'',\n                    validation: {\n                        required: true\n                    },\n                    valid: props.message? true : false,\n                    modified: false\n                }\n            ],\n            isFormValid: props.message? true : false,\n            imageModified: false,\n            imageError: null,\n            imageFiles: [] // {original: file, resized: base64}\n        }\n    }\n\n    checkFormValid(form) {\n        return form.map((field) => {\n            if (!field.validation)\n                return true;\n            else\n                return field.valid;\n        }).reduce((accum, field) => {\n            return accum && field;\n        }, true);\n    }\n\n    submitHandler = (event) => {\n        // event.preventDefault();\n\n        const message = {};\n\n        if (this.checkFormValid(this.state.controls)) {\n            this.state.controls.forEach(control => {\n                message[control.id] = control.value;\n            });\n\n            this.props.onSubmit(\n                message,\n                this.state.imageModified,\n                this.state.imageFiles);\n        }\n    }\n\n    cancelHandler = () => {\n        this.props.onCancel();\n    }\n\n    inputChangedHandler = (event, configIndex) => {\n        const updatedControls = updateArray(this.state.controls,\n            {\n                ...this.state.controls[configIndex],\n                value: event.target.value,\n                valid: checkFormFieldValid(event.target.value, this.state.controls[configIndex].validation),\n                modified: true\n            },\n            configIndex\n        );\n        //console.log(updatedControls);\n        this.setState({\n            controls: updatedControls,\n            isFormValid: this.checkFormValid(updatedControls)\n        });\n    }\n\n    resetForm = () => {\n        const newControls = this.state.controls.map(control => {\n            return {\n                ...control, ...{\n                    value: '',\n                    valid: false,\n                    modified: false\n                }\n            };\n        });\n\n        this.setState({\n            controls: newControls,\n            isFormValid: false,\n            imageError: null,\n            imageModified: false,\n            imageFiles: []\n        });\n    }\n\n    validateImage = (file) => {\n        if(file.type !== 'image/jpeg' \n            && file.type !== 'image/x-png'\n            && file.type !== 'image/png'){\n            return this.props.t('createmessage.errors.image_format');\n        }\n\n        if(file.size > 10485760){\n            return this.props.t('createmessage.errors.image_size');\n        }\n\n        return null;\n    }\n\n    imageChosenHandler = async (event) => {\n        const imageFilesList = event.target.files;\n        const inputValue = event.target.value;\n\n        if (imageFilesList) {\n            const imageFiles = [];\n\n            for (let i = 0; i < imageFilesList.length; i++) {\n                let file = imageFilesList[i];\n                let imageError = null;\n\n                imageError = this.validateImage(file);\n                if(imageError !== null){\n                    this.setState({\n                        imageFiles: [],\n                        imageError: imageError,\n                        imageModified: true\n                    });\n\n                    return;\n                }\n                imageFiles.push({ original: file });\n            }\n\n            for (let index = 0; index < imageFiles.length; index++) {\n                let file = imageFiles[index];\n                let contentType = null;\n\n                contentType = 'JPEG';\n\n                try{\n                    imageFiles[index]['resized'] = await resizeImage(file.original, contentType);\n                }catch(error){\n                    console.log(error);\n                    this.setState({\n                        imageFiles: [],\n                        imageError: this.props.t('createmessage.errors.image_resize'),\n                        imageModified: true\n                    });\n\n                    return;\n                }\n            };\n\n            this.setState({\n                imageFiles: imageFiles,\n                imageError: null,\n                imageModified: true\n            });\n\n        } else {\n            this.setState({\n                imageFiles: [],\n                imageError: null,\n                imageModified: true\n            });\n        }\n    }\n\n    render() {\n        const additionalConfig = { fullWidth: true };\n        const buttonConfig = {};\n        let mainContent = null;\n        const { t, classes, message } = this.props;\n\n        if (!this.state.isFormValid) {\n            buttonConfig['disabled'] = true;\n        }\n\n        let imageCards = null;\n        let images = null;\n\n        let imageError = null\n        if(this.state.imageError){\n            imageError = (<Typography\n                variant=\"body1\"\n                color=\"error\"\n            >{this.state.imageError}</Typography>)\n        }\n\n        if (this.state.imageFiles.length > 0) {\n            images = this.state.imageFiles.map((files, index) => {\n                let imageFilePath = URL.createObjectURL(files.original);\n                if (files.resized) {\n                    imageFilePath = files.resized;\n                }\n\n                return (\n                    <Grid item xs={12} sm={10} md={8} key={index}>\n                        <ImageCard\n                            imageURL={imageFilePath}\n                        />\n                    </Grid>\n                );\n            });\n        }else if (!this.state.imageModified && message && message.imageFiles.length > 0) {\n            images = message.imageFiles.map((files, index) => {\n                let imageFilePath = files.resizedImageURL;\n\n                return (\n                    <Grid item xs={12} sm={10} md={8} key={index}>\n                        <ImageCard\n                            imageURL={imageFilePath}\n                        />\n                    </Grid>\n                );\n            });\n        }\n\n        if(images){\n            imageCards = (\n                <Grid container justify=\"center\" style={{ margin: '20px 0px' }}>\n                    {images}\n                </Grid>\n            );\n        }\n\n        return (\n            <Grid container justify=\"center\" spacing={2} >\n                <Grid item xs={12}>\n                    <form className={classes.form} >\n                        {this.state.controls.map((formElement, index) => {\n                            return (\n                                <Input\n                                    key={index}\n                                    elementType={formElement.elementType}\n                                    validation={formElement.validation}\n                                    elementConfig={{ ...formElement.elementConfig, ...additionalConfig }}\n                                    value={formElement.value}\n                                    onChange={(event) => { this.inputChangedHandler(event, index) }}\n                                    needValidation={formElement.validation && formElement.modified}\n                                    required={formElement.validation && formElement.validation.required}\n                                    invalid={!formElement.valid}\n                                />\n                            )\n                        }\n                        )}\n                    </form>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"body1\">\n                        {t('createmessage.upload_image')}\n                    </Typography>\n                    <ImageInput\n                        multiple\n                        onChange={(e) => this.imageChosenHandler(e)} />\n                    {imageError}\n                    {imageCards}\n                </Grid>\n                <Grid item xs={12}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        {...buttonConfig}\n                        onClick={this.submitHandler}\n                    >\n                        {t('createmessage.submit')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        onClick={this.cancelHandler}\n                    >\n                        {t('general.cancel')}\n                    </Button>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\n/**\n * expected props:\n * message: message object for initial display\n * onSubmit: when submit button clicked\n */\n\n\nexport default withTranslation()(withStyles(styles)(MessageForm));\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/updateMessage.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/updateMessage.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Articles/CreateArticle.js",["280","281","282"],"import React, { Component } from 'react';\nimport { Button, Grid, Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { withTranslation } from 'react-i18next';\n\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ContentContainer from '../../components/UI/ContentContainer/ContentContainer';\nimport MessageCard from '../../components/UI/Cards/MessageCard';\nimport GoogleButton from 'react-google-button'\nimport ArticleForm from '../../components/Article/ArticleForm';\n\nconst styles = theme => ({\n    root: {\n        paddingBottom: 100\n    },\n    login: {\n        paddingTop: 50\n    },\n    form: {\n        '& .MuiTextField-root': {\n            // boxSizing: 'border-box',\n            margin: '20px 0px',\n            width: '100%',\n            display: 'block'\n        },\n        width: '100%'\n    }\n});\n\nclass CreateArticle extends Component {\n\n    state = {\n        article: null\n    };\n    \n    submitHandler = (article, imageModified, imageFiles) => {\n        //save article for retaining user input after error\n        this.setState({\n            article: article\n        });\n\n        this.props.onCreateArticle(\n            this.props.userId,\n            article,\n            imageFiles);\n    }\n\n    successHandler = () => {\n        this.setState({article: null});\n        this.props.onCreateArticleReset();\n        // this.props.onGetLifeReview();\n    }\n\n    cancelHandler = () => {\n\n    }\n\n    render() {\n        const additionalConfig = { fullWidth: true };\n        const buttonConfig = {};\n        let mainContent = null;\n        const { t, classes } = this.props;\n\n        if (this.props.createArticleSuccess) {\n            mainContent = <Grid item xs={12} >\n                <MessageCard\n                    message={t('createarticle.submit_success')}\n                    actionText={t('general.ok')}\n                    onAction={this.successHandler} />\n            </Grid>;\n        }\n        else {\n            if (this.props.authenticated) {\n\n                if (this.props.loading) {\n                    mainContent = <Grid item xs={12}><Spinner /></Grid>;\n                } else {\n                    let createArticleError = null;\n\n                    if (this.props.createArticleError) {\n                        createArticleError = (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant=\"body1\"\n                                    color=\"error\"\n                                >{this.props.createArticleError.message}</Typography>\n                            </Grid>\n                        );\n                    }\n\n                    mainContent = (\n                        <React.Fragment>\n                            <Grid item xs={12}>\n                                <ArticleForm\n                                    article={this.state.article}\n                                    onSubmit={this.submitHandler}\n                                    onCancel={this.cancelHandler}\n                                />\n                            </Grid>\n                            {createArticleError}\n                        </React.Fragment>\n                    );\n                };\n            } else {\n                mainContent = (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body1\" className={classes.login}>\n                                {t('createarticle.must_signin')}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <GoogleButton label={t('login.google_login')} onClick={this.props.onGoogleLogin} />\n                        </Grid>\n                    </React.Fragment>\n                );\n\n            }\n        }\n\n        return (\n            <ContentContainer>\n                <Grid container justify=\"center\" spacing={2} className={classes.root}>\n                    {mainContent}\n                </Grid>\n            </ContentContainer>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.createArticle.loading,\n        createArticleError: state.createArticle.createArticleError,\n        createArticleSuccess: state.createArticle.createArticleSuccess,\n\n        loginLoading: state.auth.loading,\n        authenticated: state.auth.authenticated,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCreateArticle: (userId, article, imageFiles) => dispatch(actions.createArticle(userId, article, imageFiles)),\n        onCreateArticleReset: () => dispatch(actions.createArticleReset()),\n        onGoogleLogin: () => dispatch(actions.googleLogin())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)\n    (withTranslation()(\n        withStyles(styles)(CreateArticle)\n    ));\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/Article/ArticleForm.js",["283","284","285"],"import React, { Component } from 'react';\nimport { Button, Grid, Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withTranslation } from 'react-i18next';\n\nimport Input from '../UI/Input/Input'\nimport { checkFormFieldValid, updateArray } from '../../utility/utility';\nimport ImageInput from '../UI/Image/ImageInput';\nimport ImageCard from '../UI/Image/ImageCard';\nimport { resizeImage } from '../../utility/Image/ImageResizer';\n\nconst styles = theme => ({\n    form: {\n        '& .MuiTextField-root': {\n            // boxSizing: 'border-box',\n            margin: '20px 0px',\n            width: '100%',\n            display: 'block'\n        },\n        width: '100%'\n    },\n    button: {\n        margin: 10\n    }\n});\n\nclass ArticleForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            controls: [\n                {\n                    id: 'title',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        label: props.t('createarticle.title'),\n                        rows: 2\n                    },\n                    visibleType: 'article',\n                    value: props.article\n                        ? props.article.title\n                        : ''\n                },\n                {\n                    id: 'content',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        label: props.t('createarticle.content'),\n                        rows: 15\n                    },\n                    visibleType: 'article',\n                    value: props.article\n                        ? props.article.content\n                        : ''\n                },\n                {\n                    id: 'caption',\n                    elementType: 'textarea',\n                    elementConfig: {\n                        label: props.t('createarticle.caption'),\n                        rows: 2\n                    },\n                    visibleType: 'image',\n                    value: props.article\n                        ? props.article.caption\n                        : ''\n                },\n            ],\n            isFormValid: props.article ? true : false,\n            imageModified: false,\n            imageError: null,\n            imageFiles: [] // {original: file, resized: base64}\n        }\n    }\n\n    checkFormValid(hasImage, form) {\n        return hasImage || form.map((field) => {\n            return (field.value && field.value.trim() !== '');\n        }).reduce((accum, field) => {\n            return accum || field;\n        }, false);\n    }\n\n    submitHandler = (event) => {\n        // event.preventDefault();\n\n        const article = {};\n\n        if (this.checkFormValid(this.state.imageFiles.length > 0, this.state.controls)) {\n            this.state.controls.forEach(control => {\n                article[control.id] = control.value;\n            });\n\n            if (this.props.article)\n                article['type'] = this.props.article.type;\n\n            this.props.onSubmit(\n                article,\n                this.state.imageModified,\n                this.state.imageFiles);\n        }\n    }\n\n    cancelHandler = () => {\n        this.props.onCancel();\n    }\n\n    inputChangedHandler = (event, id) => {\n        let configIndex = -1;\n        let formElement = null;\n        const controls = this.state.controls;\n\n        for(let i=0;i<controls.length;i++){\n            if(controls[i].id === id){\n                configIndex = i;\n                formElement = controls[i];\n                break;\n            }\n        }\n\n        const updatedControls = updateArray(this.state.controls,\n            {\n                ...formElement,\n                value: event.target.value\n            },\n            configIndex\n        );\n\n        this.setState({\n            controls: updatedControls,\n            isFormValid: this.checkFormValid(this.state.imageFiles.length > 0, updatedControls)\n        });\n    }\n\n    resetForm = () => {\n        const newControls = this.state.controls.map(control => {\n            return {\n                ...control, ...{\n                    value: ''\n                }\n            };\n        });\n\n        this.setState({\n            controls: newControls,\n            isFormValid: false,\n            imageError: null,\n            imageModified: false,\n            imageFiles: []\n        });\n    }\n\n    validateImage = (file) => {\n        if (file.type !== 'image/jpeg'\n            && file.type !== 'image/x-png'\n            && file.type !== 'image/png') {\n            return this.props.t('createarticle.errors.image_format');\n        }\n\n        if (file.size > 10485760) {\n            return this.props.t('createarticle.errors.image_size');\n        }\n\n        return null;\n    }\n\n    imageChosenHandler = async (event) => {\n        const imageFilesList = event.target.files;\n        const inputValue = event.target.value;\n\n        if (imageFilesList) {\n            const imageFiles = [];\n\n            for (let i = 0; i < imageFilesList.length; i++) {\n                let file = imageFilesList[i];\n                let imageError = null;\n\n                imageError = this.validateImage(file);\n                if (imageError !== null) {\n                    this.setState({\n                        imageFiles: [],\n                        imageError: imageError,\n                        imageModified: true,\n                        isFormValid: this.checkFormValid(false, this.state.controls)\n                    });\n\n                    return;\n                }\n                imageFiles.push({ original: file });\n            }\n\n            for (let index = 0; index < imageFiles.length; index++) {\n                let file = imageFiles[index];\n                let contentType = null;\n\n                contentType = 'JPEG';\n\n                try {\n                    imageFiles[index]['resized'] = await resizeImage(file.original, contentType);\n                } catch (error) {\n                    console.log(error);\n                    this.setState({\n                        imageFiles: [],\n                        imageError: this.props.t('createarticle.errors.image_resize'),\n                        imageModified: true,\n                        isFormValid: this.checkFormValid(false, this.state.controls)\n                    });\n\n                    return;\n                }\n            };\n\n            this.setState({\n                imageFiles: imageFiles,\n                imageError: null,\n                imageModified: true,\n                isFormValid: this.checkFormValid(imageFiles.length > 0, this.state.controls)\n            });\n\n        } else {\n            this.setState({\n                imageFiles: [],\n                imageError: null,\n                imageModified: true,\n                isFormValid: this.checkFormValid(false, this.state.controls)\n            });\n        }\n    }\n\n    render() {\n        const additionalConfig = { fullWidth: true };\n        const buttonConfig = {};\n        let mainContent = null;\n        const { t, classes, article } = this.props;\n\n        if (!this.state.isFormValid) {\n            buttonConfig['disabled'] = true;\n        }\n\n        let imageCards = null;\n        let images = null;\n        let imageError = null;\n        let imageInput = null;\n\n        if (!this.props.article || this.props.article.type === 'image') {\n\n            if (this.state.imageError) {\n                imageError = (<Typography\n                    variant=\"body1\"\n                    color=\"error\"\n                >{this.state.imageError}</Typography>)\n            }\n\n            if (this.state.imageFiles.length > 0) {\n                images = this.state.imageFiles.map((files, index) => {\n                    let imageFilePath = URL.createObjectURL(files.original);\n                    if (files.resized) {\n                        imageFilePath = files.resized;\n                    }\n\n                    return (\n                        <Grid item xs={12} sm={10} md={8} key={index}>\n                            <ImageCard\n                                imageURL={imageFilePath}\n                            />\n                        </Grid>\n                    );\n                });\n            } else if (!this.state.imageModified && article) {\n                images = [(\n                    <Grid item xs={12} sm={10} md={8} key=\"1\">\n                        <ImageCard\n                            imageURL={article.resizedImageURL}\n                        />\n                    </Grid>\n                )];\n            }\n\n            if (images) {\n                imageCards = (\n                    <Grid container justify=\"center\" style={{ margin: '20px 0px' }}>\n                        {images}\n                    </Grid>\n                );\n            }\n\n            imageInput = (\n                <React.Fragment>\n                    <Typography variant=\"body1\">\n                        {t('createarticle.upload_image')}\n                    </Typography>\n                    <ImageInput\n                        onChange={(e) => this.imageChosenHandler(e)} />\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <Grid container justify=\"center\" spacing={2} >\n                <Grid item xs={12}>\n                    <form className={classes.form} >\n                        {this.state.controls\n                            .filter(element => !this.props.article\n                                || this.props.article.type === element.visibleType)\n                            .map((formElement, index) => {\n                                return (\n                                    <Input\n                                        key={index}\n                                        elementType={formElement.elementType}\n                                        validation={formElement.validation}\n                                        elementConfig={{ ...formElement.elementConfig, ...additionalConfig }}\n                                        value={formElement.value}\n                                        onChange={(event) => { this.inputChangedHandler(event, formElement.id) }}\n                                        needValidation={formElement.validation && formElement.modified}\n                                        required={formElement.validation && formElement.validation.required}\n                                        invalid={!formElement.valid}\n                                    />\n                                )\n                            }\n                            )}\n                    </form>\n                </Grid>\n                <Grid item xs={12}>\n                    {imageInput}\n                    {imageError}\n                    {imageCards}\n                </Grid>\n                <Grid item xs={12}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        {...buttonConfig}\n                        onClick={this.submitHandler}\n                    >\n                        {t('createarticle.submit')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.button}\n                        onClick={this.cancelHandler}\n                    >\n                        {t('general.cancel')}\n                    </Button>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\n/**\n * expected props:\n * article: article object for initial display\n * onSubmit: when submit button clicked\n */\n\n\nexport default withTranslation()(withStyles(styles)(ArticleForm));\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/createArticle.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/createArticle.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/actions/updateArticle.js",["286"],"import * as actionTypes from './actionTypes';\nimport firebase from 'firebase';\nimport { app } from \"../../base\";\n\nexport const getArticleSuccess = (article) => {\n    return {\n        type: actionTypes.GET_ARTICLE_SUCCESS,\n        article: article\n    };\n};\n\nexport const getArticleFailed = (error) => {\n    return {\n        type: actionTypes.GET_ARTICLE_FAILED,\n        error: error\n    };\n};\n\nexport const getArticleStart = () => {\n    return {\n        type: actionTypes.GET_ARTICLE_START\n    };\n}\n\nexport const getArticle = (articleId) => {\n    return dispatch => {\n        dispatch(getArticleStart());\n\n        app.firestore().collection(\"lifereview\").doc(articleId).get()\n            .then(snapshot => {\n                if (snapshot.exists) {\n                    dispatch(getArticleSuccess(\n                        {\n                            ...snapshot.data(),\n                            ...{ id: snapshot.id }\n                        }\n                    ));\n                } else {\n                    dispatch(getArticleFailed(new Error('errors.record_not_found')));\n                }\n            })\n            .catch(err => {\n                dispatch(getArticleFailed(err));\n            });\n    }\n}\n\nexport const updateArticleSuccess = () => {\n    return {\n        type: actionTypes.UPDATE_ARTICLE_SUCCESS\n    };\n};\n\nexport const updateArticleFailed = (error) => {\n    return {\n        type: actionTypes.UPDATE_ARTICLE_FAILED,\n        error: error\n    };\n};\n\nexport const updateArticleStart = () => {\n    return {\n        type: actionTypes.UPDATE_ARTICLE_START\n    };\n}\n\nconst uploadImage = async (filename, file, contentType, isBase64) => {\n    const storageRef = app.storage().ref();\n\n    let fileRef = storageRef.child(filename);\n    let downloadURL = null;\n\n\n    if (isBase64) {\n        await fileRef.putString(file, 'base64', { contentType: contentType })\n    } else {\n        await fileRef.put(file);\n    }\n    downloadURL = await fileRef.getDownloadURL();\n\n    return downloadURL;\n}\n\nconst deleteImage = async (filename) => {\n    const storageRef = app.storage().ref();\n    let fileRef = storageRef.child(filename);\n\n    await fileRef.delete();\n}\n\nexport const updateArticleReset = () => {\n    return {\n        type: actionTypes.UPDATE_ARTICLE_RESET\n    };\n}\n\nexport const updateArticle = (userId, articleId, article, imageModified, imageFiles) => {\n    return async dispatch => {\n        dispatch(updateArticleStart());\n\n        if (article.type === 'image') {\n            const updateArticle = {};\n\n            if (!imageModified) {\n                dispatch(updateArticleSuccess());\n                return;\n            }\n\n            if(imageFiles.length == 0){\n                dispatch(updateArticleSuccess());\n                return;\n            }\n\n            const fileNamePrefix = userId + '-' + new Date().getTime();\n            let originalImage = imageFiles[0].original;\n            let resizedImageBase64 = imageFiles[0].resized;\n\n            if (originalImage) {\n                let originalImageURL = null;\n\n                try {\n                    originalImageURL = await uploadImage(\n                        'lifereview/original/' + fileNamePrefix + '-0-ori',\n                        originalImage,\n                        originalImage.type,\n                        false);\n\n                        updateArticle['originalImageURL'] = originalImageURL;\n                        updateArticle['originalImageFilename'] = fileNamePrefix + '-0-ori';\n                } catch (error) {\n                    console.log(\"updateArticle: uploadImage original error \", error);\n                    dispatch(updateArticleFailed(new Error('Upload original image failed')));\n                    return;\n                }\n\n                if (resizedImageBase64) {\n                    let resizedImageURL = null;\n                    resizedImageBase64 = resizedImageBase64.substring(resizedImageBase64.indexOf(',') + 1);\n\n                    try {\n                        resizedImageURL = await uploadImage(\n                            'lifereview/resized/' + fileNamePrefix + '-0-r1',\n                            resizedImageBase64,\n                            // originalImage.type,\n                            'image/jpeg',\n                            true);\n\n                            updateArticle['resizedImageURL'] = resizedImageURL;\n                            updateArticle['resizedImageFilename'] = fileNamePrefix + '-0-r1';\n                    } catch (error) {\n                        console.log(\"updateArticle: uploadImage original error \", error);\n                        dispatch(updateArticleFailed(new Error('Upload resized image failed')));\n                        return;\n                    }\n                }\n            }\n\n            updateArticle['update_timestamp'] = firebase.firestore.FieldValue.serverTimestamp();\n            updateArticle['caption'] = article.caption;\n\n            try {\n                await app.firestore().collection(\"lifereview\").doc(articleId).update(updateArticle);\n                dispatch(updateArticleSuccess());\n            } catch (error) {\n                console.log(\"updateArticle: upload firestore failed\", error);\n                dispatch(updateArticleFailed(new Error('Failed to update article')));\n            }\n            \n        }else if(article.type === 'article'){\n            try {\n                await app.firestore().collection(\"lifereview\").doc(articleId).update({\n                    update_timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                    title: article.title,\n                    content: article.content\n                });\n                dispatch(updateArticleSuccess());\n            } catch (error) {\n                console.log(\"updateArticle: upload firestore failed\", error);\n                dispatch(updateArticleFailed(new Error('Failed to update article')));\n            }\n        }\n    }\n}\n\nexport const deleteArticleSuccess = () => {\n    return {\n        type: actionTypes.DELETE_ARTICLE_SUCCESS\n    };\n};\n\nexport const deleteArticleFailed = (error) => {\n    return {\n        type: actionTypes.DELETE_ARTICLE_FAILED,\n        error: error\n    };\n};\n\nexport const deleteArticleStart = () => {\n    return {\n        type: actionTypes.DELETE_ARTICLE_START\n    };\n}\n\nexport const deleteArticle = (articleId, article) => {\n    return async dispatch => {\n        dispatch(deleteArticleStart());\n\n        if (article.type === 'image') {\n            try {\n                await deleteImage('lifereview/original/' +article.originalImageFilename);\n                await deleteImage('lifereview/resized/' +article.resizedImageFilename);\n                await app.firestore().collection(\"lifereview\").doc(articleId).delete();\n                dispatch(deleteArticleSuccess());\n            } catch (error) {\n                console.log(error);\n                dispatch(deleteArticleFailed(error));\n            }\n            \n        }else if(article.type === 'article'){\n            try {\n                await app.firestore().collection(\"lifereview\").doc(articleId).delete();\n                dispatch(deleteArticleSuccess());\n            } catch (error) {\n                console.log(error);\n                dispatch(deleteArticleFailed(error));\n            }\n        }\n    }\n}","/Users/dominic/workspace/dad_page/dad-page-frontend/src/store/reducers/updateArticle.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/Articles/UpdateArticle.js",["287","288","289"],"import React, { Component } from 'react';\nimport { Dialog, DialogContent, Grid, Typography } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { withTranslation } from 'react-i18next';\n\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport ContentContainer from '../../components/UI/ContentContainer/ContentContainer';\nimport MessageCard from '../../components/UI/Cards/MessageCard';\nimport GoogleButton from 'react-google-button'\nimport ArticleForm from '../../components/Article/ArticleForm';\n\nconst styles = theme => ({\n\n});\n\nclass UpdateArticle extends Component {\n\n    submitHandler = (article, imageModified, imageFiles) => {\n        this.props.onUpdateArticle(\n            this.props.userId,\n            this.props.articleId,\n            article,\n            imageModified,\n            imageFiles);\n    }\n\n    render() {\n        const additionalConfig = { fullWidth: true };\n        const buttonConfig = {};\n        let mainContent = null;\n        const { t, classes } = this.props;\n\n        if (this.props.updateArticleSuccess) {\n            mainContent = <Grid item xs={12} >\n                <MessageCard\n                    message={t('updatearticle.submit_success')}\n                    actionText={t('general.ok')}\n                    onAction={this.props.onSuccess} />\n            </Grid>;\n        }\n        else {\n            if (this.props.authenticated) {\n\n                if (!this.props.article || this.props.loading) {\n                    mainContent = <Grid item xs={12}><Spinner /></Grid>;\n                } else {\n                    let updateArticleError = null;\n\n                    if (this.props.updateArticleError) {\n                        updateArticleError = (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant=\"body1\"\n                                    color=\"error\"\n                                >{this.props.updateArticleError.message}</Typography>\n                            </Grid>\n                        );\n                    }\n\n                    mainContent = (\n                        <React.Fragment>\n                            <Grid item xs={12}>\n                                <ArticleForm\n                                    article={this.props.article}\n                                    onSubmit={this.submitHandler}\n                                    onCancel={this.props.onCancel}\n                                />\n                            </Grid>\n                            {updateArticleError}\n                        </React.Fragment>\n                    );\n                };\n            } else {\n                mainContent = (\n                    <React.Fragment>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body1\" className={classes.login}>\n                                {t('updatearticle.must_signin')}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <GoogleButton label={t('login.google_login')} onClick={this.props.onGoogleLogin} />\n                        </Grid>\n                    </React.Fragment>\n                );\n\n            }\n        }\n\n        return (\n            <Dialog open={this.props.show} >\n                <DialogContent>\n                    <Grid container justify=\"center\" spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                {t('updatearticle.title')}\n                            </Typography>\n                        </Grid>\n                        {mainContent}\n                    </Grid>\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.updateArticle.loading,\n        updateArticleError: state.updateArticle.updateArticleError,\n        updateArticleSuccess: state.updateArticle.updateArticleSuccess,\n\n        loginLoading: state.auth.loading,\n        authenticated: state.auth.authenticated,\n        userId: state.auth.userId,\n\n        article: state.updateArticle.article\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUpdateArticle: (userId, articleId, article, imageModified, imageFiles) => dispatch(actions.updateArticle(userId, articleId, article, imageModified, imageFiles)),\n        onGoogleLogin: () => dispatch(actions.googleLogin())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)\n    (withTranslation()(\n        withStyles(styles)(UpdateArticle)\n    ));\n","/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Dialogs/OkDialog.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/components/UI/Dialogs/OkCancelDialog.js",[],"/Users/dominic/workspace/dad_page/dad-page-frontend/src/containers/News/News.js",["290","291","292","293"],"import React, { Component } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport titleImage from '../../assets/venice.jpg'\nimport profileImage from '../../assets/profile.jpeg'\nimport { withStyles } from '@material-ui/core/styles';\n\nimport ArticleItems from '../Articles/ArticleItems';\nimport ContentContainer from '../../components/UI/ContentContainer/ContentContainer';\nimport { withTranslation } from 'react-i18next';\n\nconst styles = theme => ({\n    root: {\n        paddingBottom: 100\n    },\n    titleImageDiv: {\n        overflow: 'hidden'\n    },\n    titleImage: {\n\n        objectFit: 'cover',\n        // height: '400px',\n        width: '1080px',\n        marginTop: '20px',\n        marginLeft: '50%',\n        transform: 'translateX(-50%)'\n        // opacity: '0.8'\n    },\n    profileImage: {\n        objectFit: 'contain',\n        top: '180px',\n        // marginTop: '20px',\n        position: 'absolute',\n\n        height: '300px',\n        marginLeft: '65%',\n        transform: 'translateX(-65%)',\n\n\n        [theme.breakpoints.down('sm')]: {\n            height: '250px',\n            marginLeft: '50%',\n            transform: 'translateX(-50%)',\n        }\n    },\n    title: {\n        top: '420px',\n        // marginTop: '100px',\n        marginLeft: '8%',\n        transform: 'translateX(-5%)',\n        position: 'absolute',\n        width: '700px',\n        color: 'white',\n        fontWeight: 'bold',\n        textShadow: '1px 1px black',\n\n        [theme.breakpoints.down('sm')]: {\n            top: '360px',\n            marginLeft: '40%',\n            width: '250px',\n            transform: 'translateX(-50%)'\n        }\n    }\n});\n\nclass News extends Component {\n\n    render() {\n        const { t } = this.props;\n\n        return (\n            <React.Fragment>\n                <ContentContainer>\n                    <div className={this.props.classes.titleImageDiv}>\n                        <img\n                            className={this.props.classes.titleImage}\n                            // src={titleImage}\n                            src=\"https://firebasestorage.googleapis.com/v0/b/dad-page.appspot.com/o/lifereview%2Fcover.jpg?alt=media&token=98e2a593-7cec-4a5b-8a13-4192b9686df7\"\n                            alt='image'\n                        />\n                    </div>\n                    {/* <img\n                        className={this.props.classes.profileImage}\n                        src={profileImage}\n                        alt='image'\n                    /> */}\n                    <Typography variant=\"h6\" align=\"left\"\n                        className={this.props.classes.title}\n                    >\n                        {t('lifereview.heading1')}<br/>\n                        {t('lifereview.heading')}\n                    </Typography>\n                    <Grid container justify=\"center\" className={this.props.classes.root}\n                    // spacing={2} \n                    >\n                        <Grid item>\n                            <Typography variant=\"h5\">\n                                先夫\n                            </Typography>\n                            <Typography variant=\"h4\"><strong>陳銘洪醫生</strong></Typography>\n                            <Typography variant=\"h6\">\n                                痛於主曆2021年1月21日\n                                在廣華醫院息勞歸主在世寄居六十五載遺體奉移紅磡萬國殯儀館治喪謹定於<br/>\n                                <br/>主曆2021年2月26日（星期五)\n                                <br/>下午5時在該館地下孝思大禮堂設靈\n                                <br/>晚上7時30分舉行追思會<br/>\n                                <br/>翌日2月27日（星期六）上午10時舉行安息禮拜\n                                <br/>上午11時辭靈隨即出殯奉柩柴灣哥連臣角火葬場舉行火化禮\n                                <br/>哀此訃<br/><br/>\n                            </Typography>\n                            <Typography variant=\"h3\">\n                            <strong>聞</strong>\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                妻\n                                </Typography>\n                            <Typography variant=\"h5\">\n                            <strong>陳陳玩儀</strong>\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                孝男卓謙 孝媳姚冠婷<br/>\n                                孝男卓恆 孝媳廖麗華<br/>\n                                孫男崇希<br/>\n                                孫女希蕾<br/>\n                            </Typography>\n                            <Typography variant=\"h5\">\n                            <strong>敬告</strong>\n                            </Typography>\n                            <Typography variant=\"h6\">\n                                <br/>                                \n                                懇辭花圈<br/>\n                                如蒙賜賻<br/>\n                                帛金撥捐<br/>\n                                慈善用途<br/><br/>\n                                治喪處：萬國殯儀館<br/>\n                                地址：紅磡暢行道八號<br/>\n                                電話：2303 1234<br/>\n                                <br/>\n                                追思會及安息禮拜直播連結:<br/>\n                                請使用 Zoom 軟件登入:<br/>\n                                <a href=\"https://zoom.us/j/95595672038\">https://zoom.us/j/95595672038</a><br/>\n                                <br/>\n                                Meeting ID: 955 9567 2038<br/>\n                                Passcode: 20210226<br/>\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </ContentContainer>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withTranslation()(withStyles(styles)(News));",{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":2,"column":16,"nodeType":"300","messageId":"301","endLine":2,"endColumn":26},{"ruleId":"298","severity":1,"message":"302","line":3,"column":8,"nodeType":"300","messageId":"301","endLine":3,"endColumn":18},{"ruleId":"298","severity":1,"message":"303","line":4,"column":8,"nodeType":"300","messageId":"301","endLine":4,"endColumn":20},{"ruleId":"298","severity":1,"message":"304","line":67,"column":16,"nodeType":"300","messageId":"301","endLine":67,"endColumn":17},{"ruleId":"294","replacedBy":"305"},{"ruleId":"296","replacedBy":"306"},{"ruleId":"298","severity":1,"message":"307","line":3,"column":10,"nodeType":"300","messageId":"301","endLine":3,"endColumn":19},{"ruleId":"298","severity":1,"message":"308","line":35,"column":11,"nodeType":"300","messageId":"301","endLine":35,"endColumn":18},{"ruleId":"309","severity":1,"message":"310","line":138,"column":25,"nodeType":"311","messageId":"312","endLine":138,"endColumn":27},{"ruleId":"298","severity":1,"message":"313","line":37,"column":9,"nodeType":"300","messageId":"301","endLine":37,"endColumn":14},{"ruleId":"298","severity":1,"message":"314","line":2,"column":8,"nodeType":"300","messageId":"301","endLine":2,"endColumn":13},{"ruleId":"294","replacedBy":"315"},{"ruleId":"296","replacedBy":"316"},{"ruleId":"298","severity":1,"message":"317","line":8,"column":10,"nodeType":"300","messageId":"301","endLine":8,"endColumn":20},{"ruleId":"318","severity":1,"message":"319","line":80,"column":64,"nodeType":"320","messageId":"321","endLine":80,"endColumn":66},{"ruleId":"298","severity":1,"message":"322","line":5,"column":10,"nodeType":"300","messageId":"301","endLine":5,"endColumn":13},{"ruleId":"298","severity":1,"message":"323","line":158,"column":15,"nodeType":"300","messageId":"301","endLine":158,"endColumn":25},{"ruleId":"298","severity":1,"message":"324","line":2,"column":8,"nodeType":"300","messageId":"301","endLine":2,"endColumn":13},{"ruleId":"294","replacedBy":"325"},{"ruleId":"296","replacedBy":"326"},{"ruleId":"298","severity":1,"message":"327","line":2,"column":22,"nodeType":"300","messageId":"301","endLine":2,"endColumn":26},{"ruleId":"298","severity":1,"message":"328","line":2,"column":28,"nodeType":"300","messageId":"301","endLine":2,"endColumn":37},{"ruleId":"298","severity":1,"message":"329","line":2,"column":39,"nodeType":"300","messageId":"301","endLine":2,"endColumn":50},{"ruleId":"298","severity":1,"message":"307","line":2,"column":52,"nodeType":"300","messageId":"301","endLine":2,"endColumn":61},{"ruleId":"298","severity":1,"message":"330","line":2,"column":63,"nodeType":"300","messageId":"301","endLine":2,"endColumn":67},{"ruleId":"298","severity":1,"message":"317","line":3,"column":10,"nodeType":"300","messageId":"301","endLine":3,"endColumn":20},{"ruleId":"331","severity":1,"message":"332","line":21,"column":14,"nodeType":"333","endLine":25,"endColumn":15},{"ruleId":"298","severity":1,"message":"334","line":2,"column":8,"nodeType":"300","messageId":"301","endLine":2,"endColumn":17},{"ruleId":"298","severity":1,"message":"335","line":47,"column":16,"nodeType":"300","messageId":"301","endLine":47,"endColumn":24},{"ruleId":"298","severity":1,"message":"336","line":45,"column":23,"nodeType":"300","messageId":"301","endLine":45,"endColumn":33},{"ruleId":"298","severity":1,"message":"337","line":2,"column":10,"nodeType":"300","messageId":"301","endLine":2,"endColumn":16},{"ruleId":"298","severity":1,"message":"338","line":2,"column":59,"nodeType":"300","messageId":"301","endLine":2,"endColumn":70},{"ruleId":"298","severity":1,"message":"307","line":2,"column":72,"nodeType":"300","messageId":"301","endLine":2,"endColumn":81},{"ruleId":"298","severity":1,"message":"339","line":9,"column":8,"nodeType":"300","messageId":"301","endLine":9,"endColumn":24},{"ruleId":"298","severity":1,"message":"340","line":37,"column":15,"nodeType":"300","messageId":"301","endLine":37,"endColumn":31},{"ruleId":"298","severity":1,"message":"341","line":38,"column":15,"nodeType":"300","messageId":"301","endLine":38,"endColumn":27},{"ruleId":"298","severity":1,"message":"308","line":40,"column":20,"nodeType":"300","messageId":"301","endLine":40,"endColumn":27},{"ruleId":"298","severity":1,"message":"304","line":32,"column":16,"nodeType":"300","messageId":"301","endLine":32,"endColumn":17},{"ruleId":"298","severity":1,"message":"342","line":32,"column":19,"nodeType":"300","messageId":"301","endLine":32,"endColumn":26},{"ruleId":"298","severity":1,"message":"323","line":161,"column":15,"nodeType":"300","messageId":"301","endLine":161,"endColumn":25},{"ruleId":"298","severity":1,"message":"343","line":221,"column":13,"nodeType":"300","messageId":"301","endLine":221,"endColumn":24},{"ruleId":"298","severity":1,"message":"337","line":2,"column":10,"nodeType":"300","messageId":"301","endLine":2,"endColumn":16},{"ruleId":"298","severity":1,"message":"340","line":61,"column":15,"nodeType":"300","messageId":"301","endLine":61,"endColumn":31},{"ruleId":"298","severity":1,"message":"341","line":62,"column":15,"nodeType":"300","messageId":"301","endLine":62,"endColumn":27},{"ruleId":"298","severity":1,"message":"344","line":7,"column":10,"nodeType":"300","messageId":"301","endLine":7,"endColumn":29},{"ruleId":"298","severity":1,"message":"323","line":171,"column":15,"nodeType":"300","messageId":"301","endLine":171,"endColumn":25},{"ruleId":"298","severity":1,"message":"343","line":235,"column":13,"nodeType":"300","messageId":"301","endLine":235,"endColumn":24},{"ruleId":"318","severity":1,"message":"319","line":109,"column":34,"nodeType":"320","messageId":"321","endLine":109,"endColumn":36},{"ruleId":"298","severity":1,"message":"339","line":9,"column":8,"nodeType":"300","messageId":"301","endLine":9,"endColumn":24},{"ruleId":"298","severity":1,"message":"340","line":30,"column":15,"nodeType":"300","messageId":"301","endLine":30,"endColumn":31},{"ruleId":"298","severity":1,"message":"341","line":31,"column":15,"nodeType":"300","messageId":"301","endLine":31,"endColumn":27},{"ruleId":"298","severity":1,"message":"302","line":3,"column":8,"nodeType":"300","messageId":"301","endLine":3,"endColumn":18},{"ruleId":"298","severity":1,"message":"303","line":4,"column":8,"nodeType":"300","messageId":"301","endLine":4,"endColumn":20},{"ruleId":"298","severity":1,"message":"345","line":7,"column":8,"nodeType":"300","messageId":"301","endLine":7,"endColumn":20},{"ruleId":"331","severity":1,"message":"332","line":74,"column":25,"nodeType":"333","endLine":79,"endColumn":27},"no-native-reassign",["346"],"no-negated-in-lhs",["347"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'titleImage' is defined but never used.","'profileImage' is defined but never used.","'t' is assigned a value but never used.",["346"],["347"],"'Container' is defined but never used.","'classes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'title' is assigned a value but never used.","'Modal' is defined but never used.",["346"],["347"],"'makeStyles' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'app' is defined but never used.","'inputValue' is assigned a value but never used.","'axios' is defined but never used.",["346"],["347"],"'Card' is defined but never used.","'CardMedia' is defined but never used.","'CardContent' is defined but never used.","'Grid' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'PropTypes' is defined but never used.","'location' is assigned a value but never used.","'credential' is assigned a value but never used.","'Button' is defined but never used.","'DialogTitle' is defined but never used.","'ContentContainer' is defined but never used.","'additionalConfig' is assigned a value but never used.","'buttonConfig' is assigned a value but never used.","'message' is assigned a value but never used.","'mainContent' is assigned a value but never used.","'checkFormFieldValid' is defined but never used.","'ArticleItems' is defined but never used.","no-global-assign","no-unsafe-negation"]